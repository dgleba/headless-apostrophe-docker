@import 'variables.scss';
@import 'animations.scss';

// -------- Mixins --------

/// Create menus as [namespace]_menu__1, [namespace]_menu__2, ... and manages back icon animation on hover
/// @group mixins
/// @param {Int} $steps - number of menus
/// @param {String} $menu - class name of menu (originally ".at_menu")
/// @output '.at_menu__1', '.at_menu__2', ... classes with '--appear', '--appeared' and '--disappear' modifiers
@mixin menu-mixin ($steps, $menu) {
  @if $steps < 4 {
    $steps: 4;
  }
  $x: -2%;
  $y: 7%;
  $ybis: 0%;
  $xsmall: -5%;
  $yter: -400%;
  $start-time: 0s;

  @for $i from 0 to $steps {
    // i.e at_menu__1
    &__#{$i + 1} {
      $loop-x: $x + $i * -8;
      $loop-y: $y + $i * 28;
      $loop-ybis: $ybis + $i * -100;
      $loop-yter: $yter + $i * -100;
      $loop-xsmall: $xsmall - $i * 5;
      $loop-start: $start-time + $i * 0.3;

      background: lighten($base-menu-color, $i * 10%);
      color: white;
      position: relative;
      width: calc(100vw + 100vh);
      height: $menu-height;
      display: flex;
      align-items: center;
      justify-content: center;
      padding-right: $default-padding;
      cursor: pointer;
      transform: rotate(25deg) translate($loop-x, 50%);
      transition: transform 1s cubic-bezier(0.78, -0.58, 1, 0.51) $loop-start;

      &:hover {
        animation: swing 0.7s ease;
      }

      @media (orientation: portrait) {
        width: 100vh;
        transform: rotate(25deg) translate($loop-xsmall, 50%);

        @media (min-aspect-ratio: 5/8) {
          width: 125vh;
        }
      }

      @media (max-width: $medium - 1) {
        height: 80px;
      }

      // hide back button if no other class than .at_menu__X
      #{$menu}__back {
        display: none;
      }

      &--appear {
        transform: rotate(0deg) translate(0, $loop-ybis);

        // display back button when .at_menu__X--appear
        #{$menu}__back {
          display: block;
        }
      }

      &--appeared {
        width: 100vw;
        flex-direction: column;
        cursor: default;

        &:hover {
          // no swing animation when on a page
          animation: swing 0s;
        }

        .title {
          align-self: flex-end;

          @media (min-width: $small) {
            left: 70vw;
          }

          @media (min-width: $medium) {
            left: 74vw;
          }

          @media (min-width: $large) {
            left: 81vw;
          }

          @media (min-width: $x-large) {
            left: calc((100vw + 100vh) / 2 - 45px);
          }
        }
      }

      &--disappear {
        transform: rotate(25deg) translate(-120%, $loop-y);

        #{$menu}__back {
          display: none;
        }
      }
    }
  }
}

/// Create animation for arrow
/// @group mixins
/// @param {Int} $name - keyframes name
/// @param {Int} $distance - 1rem/-1rem
/// @param {String} $angle - 0/180deg/90deg
/// @param {String} $direction - row/column
@mixin arrow-anim-mixin ($name, $distance, $angle, $direction: 'row') {
  @keyframes #{$name}arrow-anim {
    0% {
      opacity: 1;

      @if $direction == 'row' {
        transform: translateX(0) rotate($angle);
      }

      @else {
        transform: translateY(0) rotate($angle);
      }
    }

    100% {
      opacity: 0;

      @if $direction == 'row' {
        transform: translateX($distance) rotate($angle);
      }

      @else {
        transform: translateY($distance) rotate($angle);
      }
    }
  }
}

/// Create arrow
/// @group mixins
/// @param {String} $class - class name
/// @param {String} $position - relative/absolute
/// @param {String} $top - 20px/-1px
/// @param {String} $right - 20px/-1px
/// @param {String} $angle - 0deg/180deg
/// @param {String} $prefix - prefix for arrow animation (see arrow-anim-mixin)
@mixin arrow-mixin ($class, $position, $top, $right, $angle, $prefix: '') {
  #{$class} {
    width: 32px;
    height: 32px;
    position: $position;
    top: $top;
    right: $right;
    cursor: pointer;
    transition: transform 0.8s ease;
    vertical-align: middle;
    transform: rotate($angle);

    g {
      fill: none;
      stroke: #fff;
      stroke-width: 1.5;
      stroke-linejoin: round;
      stroke-miterlimit: 10;

      circle {
        animation: stroke 2s ease;
        transition: stroke-dashoffset 0.8s ease;
        stroke-dasharray: 100;
        stroke-dashoffset: 0;
      }

      @if $class == '.checkmark' {
        path {
          stroke-dasharray: 100;
          stroke-dashoffset: 100;
          animation: stroke 1s ease-in 1.8s forwards;
        }
      }
    }

    &--hidden {
      opacity: 0;
      left: -38px;

      g circle {
        stroke-opacity: 0;
      }
    }

    @if $class == '.checkmark' {
      &:hover {
        g {
          circle {
            stroke-dashoffset: 100;
          }
        }
      }
    }
  }

  @if $class == '.icon' or '.at_intro.icon' or '.at_slider__btn--prev.icon' or '.at_slider__btn--next.icon' {
    &:hover {
      #{$class} {
        &--hidden {
          opacity: 1;
          animation: #{$prefix}arrow-anim 2.5s ease infinite;
        }

        g circle {
          stroke-dashoffset: 100;
        }
      }
    }
  }
}

/// Output colors shades between two colors
/// @group mixins
/// @param {String} $class - class name
/// @param {String} $color1 - end color
/// @param {String} $color2 - start color
/// @param {String} $steps - number of shades to output
@mixin mix-background-colors ($class, $color1, $color2, $steps) {
  @for $i from 0 to $steps {
    $background: mix($color1, $color2, percentage($i / ($steps - 1)));

    .#{$class}-#{$i + 1} {
      background: $background;

      @if (lightness($background) < 60) {
        color: white;
      }

      @else {
        color: black;
      }
    }
  }
}
